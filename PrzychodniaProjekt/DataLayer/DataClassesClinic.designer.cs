#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Przychodnia")]
	public partial class DataClassesClinicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertExam_dictionary(Exam_dictionary instance);
    partial void UpdateExam_dictionary(Exam_dictionary instance);
    partial void DeleteExam_dictionary(Exam_dictionary instance);
    partial void InsertLaboratory(Laboratory instance);
    partial void UpdateLaboratory(Laboratory instance);
    partial void DeleteLaboratory(Laboratory instance);
    partial void InsertLaboratory_exam(Laboratory_exam instance);
    partial void UpdateLaboratory_exam(Laboratory_exam instance);
    partial void DeleteLaboratory_exam(Laboratory_exam instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPhysical_exam(Physical_exam instance);
    partial void UpdatePhysical_exam(Physical_exam instance);
    partial void DeletePhysical_exam(Physical_exam instance);
    partial void InsertRegister(Register instance);
    partial void UpdateRegister(Register instance);
    partial void DeleteRegister(Register instance);
    partial void InsertSupervisor_lab(Supervisor_lab instance);
    partial void UpdateSupervisor_lab(Supervisor_lab instance);
    partial void DeleteSupervisor_lab(Supervisor_lab instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    #endregion
		
		public DataClassesClinicDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.PrzychodniaConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesClinicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesClinicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesClinicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesClinicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Exam_dictionary> Exam_dictionaries
		{
			get
			{
				return this.GetTable<Exam_dictionary>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory> Laboratories
		{
			get
			{
				return this.GetTable<Laboratory>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory_exam> Laboratory_exams
		{
			get
			{
				return this.GetTable<Laboratory_exam>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Physical_exam> Physical_exams
		{
			get
			{
				return this.GetTable<Physical_exam>();
			}
		}
		
		public System.Data.Linq.Table<Register> Registers
		{
			get
			{
				return this.GetTable<Register>();
			}
		}
		
		public System.Data.Linq.Table<Supervisor_lab> Supervisor_labs
		{
			get
			{
				return this.GetTable<Supervisor_lab>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_adresu;
		
		private string _miejscowosc;
		
		private string _ulica;
		
		private string _nr_domu;
		
		private string _nr_lokalu;
		
		private int _id_pac;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_adresuChanging(int value);
    partial void Onid_adresuChanged();
    partial void OnmiejscowoscChanging(string value);
    partial void OnmiejscowoscChanged();
    partial void OnulicaChanging(string value);
    partial void OnulicaChanged();
    partial void Onnr_domuChanging(string value);
    partial void Onnr_domuChanged();
    partial void Onnr_lokaluChanging(string value);
    partial void Onnr_lokaluChanged();
    partial void Onid_pacChanging(int value);
    partial void Onid_pacChanged();
    #endregion
		
		public Address()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_adresu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_adresu
		{
			get
			{
				return this._id_adresu;
			}
			set
			{
				if ((this._id_adresu != value))
				{
					this.Onid_adresuChanging(value);
					this.SendPropertyChanging();
					this._id_adresu = value;
					this.SendPropertyChanged("id_adresu");
					this.Onid_adresuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_miejscowosc", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string miejscowosc
		{
			get
			{
				return this._miejscowosc;
			}
			set
			{
				if ((this._miejscowosc != value))
				{
					this.OnmiejscowoscChanging(value);
					this.SendPropertyChanging();
					this._miejscowosc = value;
					this.SendPropertyChanged("miejscowosc");
					this.OnmiejscowoscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ulica", DbType="VarChar(40)")]
		public string ulica
		{
			get
			{
				return this._ulica;
			}
			set
			{
				if ((this._ulica != value))
				{
					this.OnulicaChanging(value);
					this.SendPropertyChanging();
					this._ulica = value;
					this.SendPropertyChanged("ulica");
					this.OnulicaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr_domu", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nr_domu
		{
			get
			{
				return this._nr_domu;
			}
			set
			{
				if ((this._nr_domu != value))
				{
					this.Onnr_domuChanging(value);
					this.SendPropertyChanging();
					this._nr_domu = value;
					this.SendPropertyChanged("nr_domu");
					this.Onnr_domuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr_lokalu", DbType="VarChar(40)")]
		public string nr_lokalu
		{
			get
			{
				return this._nr_lokalu;
			}
			set
			{
				if ((this._nr_lokalu != value))
				{
					this.Onnr_lokaluChanging(value);
					this.SendPropertyChanging();
					this._nr_lokalu = value;
					this.SendPropertyChanged("nr_lokalu");
					this.Onnr_lokaluChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_pac", DbType="Int NOT NULL")]
		public int id_pac
		{
			get
			{
				return this._id_pac;
			}
			set
			{
				if ((this._id_pac != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_pacChanging(value);
					this.SendPropertyChanging();
					this._id_pac = value;
					this.SendPropertyChanged("id_pac");
					this.Onid_pacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Address", Storage="_Patient", ThisKey="id_pac", OtherKey="id_pac", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._id_pac = value.id_pac;
					}
					else
					{
						this._id_pac = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_lek;
		
		private string _imie;
		
		private string _nazwisko;
		
		private int _NPWZ;
		
		private int _Id_user;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_lekChanging(int value);
    partial void Onid_lekChanged();
    partial void OnimieChanging(string value);
    partial void OnimieChanged();
    partial void OnnazwiskoChanging(string value);
    partial void OnnazwiskoChanged();
    partial void OnNPWZChanging(int value);
    partial void OnNPWZChanged();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    #endregion
		
		public Doctor()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_lek", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_lek
		{
			get
			{
				return this._id_lek;
			}
			set
			{
				if ((this._id_lek != value))
				{
					this.Onid_lekChanging(value);
					this.SendPropertyChanging();
					this._id_lek = value;
					this.SendPropertyChanged("id_lek");
					this.Onid_lekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imie", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string imie
		{
			get
			{
				return this._imie;
			}
			set
			{
				if ((this._imie != value))
				{
					this.OnimieChanging(value);
					this.SendPropertyChanging();
					this._imie = value;
					this.SendPropertyChanged("imie");
					this.OnimieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwisko", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nazwisko
		{
			get
			{
				return this._nazwisko;
			}
			set
			{
				if ((this._nazwisko != value))
				{
					this.OnnazwiskoChanging(value);
					this.SendPropertyChanging();
					this._nazwisko = value;
					this.SendPropertyChanged("nazwisko");
					this.OnnazwiskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPWZ", DbType="Int NOT NULL")]
		public int NPWZ
		{
			get
			{
				return this._NPWZ;
			}
			set
			{
				if ((this._NPWZ != value))
				{
					this.OnNPWZChanging(value);
					this.SendPropertyChanging();
					this._NPWZ = value;
					this.SendPropertyChanged("NPWZ");
					this.OnNPWZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int NOT NULL")]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Visits", ThisKey="id_lek", OtherKey="id_lek")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_User", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam_dictionary")]
	public partial class Exam_dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _kod;
		
		private string _typ;
		
		private string _nazwa;
		
		private EntitySet<Laboratory_exam> _Laboratory_exams;
		
		private EntitySet<Physical_exam> _Physical_exams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkodChanging(string value);
    partial void OnkodChanged();
    partial void OntypChanging(string value);
    partial void OntypChanged();
    partial void OnnazwaChanging(string value);
    partial void OnnazwaChanged();
    #endregion
		
		public Exam_dictionary()
		{
			this._Laboratory_exams = new EntitySet<Laboratory_exam>(new Action<Laboratory_exam>(this.attach_Laboratory_exams), new Action<Laboratory_exam>(this.detach_Laboratory_exams));
			this._Physical_exams = new EntitySet<Physical_exam>(new Action<Physical_exam>(this.attach_Physical_exams), new Action<Physical_exam>(this.detach_Physical_exams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kod", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string kod
		{
			get
			{
				return this._kod;
			}
			set
			{
				if ((this._kod != value))
				{
					this.OnkodChanging(value);
					this.SendPropertyChanging();
					this._kod = value;
					this.SendPropertyChanged("kod");
					this.OnkodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typ", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string typ
		{
			get
			{
				return this._typ;
			}
			set
			{
				if ((this._typ != value))
				{
					this.OntypChanging(value);
					this.SendPropertyChanging();
					this._typ = value;
					this.SendPropertyChanged("typ");
					this.OntypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwa", DbType="VarChar(127) NOT NULL", CanBeNull=false)]
		public string nazwa
		{
			get
			{
				return this._nazwa;
			}
			set
			{
				if ((this._nazwa != value))
				{
					this.OnnazwaChanging(value);
					this.SendPropertyChanging();
					this._nazwa = value;
					this.SendPropertyChanged("nazwa");
					this.OnnazwaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_dictionary_Laboratory_exam", Storage="_Laboratory_exams", ThisKey="kod", OtherKey="kod")]
		public EntitySet<Laboratory_exam> Laboratory_exams
		{
			get
			{
				return this._Laboratory_exams;
			}
			set
			{
				this._Laboratory_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_dictionary_Physical_exam", Storage="_Physical_exams", ThisKey="kod", OtherKey="kod")]
		public EntitySet<Physical_exam> Physical_exams
		{
			get
			{
				return this._Physical_exams;
			}
			set
			{
				this._Physical_exams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Exam_dictionary = this;
		}
		
		private void detach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Exam_dictionary = null;
		}
		
		private void attach_Physical_exams(Physical_exam entity)
		{
			this.SendPropertyChanging();
			entity.Exam_dictionary = this;
		}
		
		private void detach_Physical_exams(Physical_exam entity)
		{
			this.SendPropertyChanging();
			entity.Exam_dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory")]
	public partial class Laboratory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_lab;
		
		private string _imie;
		
		private string _nazwisko;
		
		private int _Id_user;
		
		private EntitySet<Laboratory_exam> _Laboratory_exams;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_labChanging(int value);
    partial void Onid_labChanged();
    partial void OnimieChanging(string value);
    partial void OnimieChanged();
    partial void OnnazwiskoChanging(string value);
    partial void OnnazwiskoChanged();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    #endregion
		
		public Laboratory()
		{
			this._Laboratory_exams = new EntitySet<Laboratory_exam>(new Action<Laboratory_exam>(this.attach_Laboratory_exams), new Action<Laboratory_exam>(this.detach_Laboratory_exams));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_lab", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_lab
		{
			get
			{
				return this._id_lab;
			}
			set
			{
				if ((this._id_lab != value))
				{
					this.Onid_labChanging(value);
					this.SendPropertyChanging();
					this._id_lab = value;
					this.SendPropertyChanged("id_lab");
					this.Onid_labChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imie", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string imie
		{
			get
			{
				return this._imie;
			}
			set
			{
				if ((this._imie != value))
				{
					this.OnimieChanging(value);
					this.SendPropertyChanging();
					this._imie = value;
					this.SendPropertyChanged("imie");
					this.OnimieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwisko", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nazwisko
		{
			get
			{
				return this._nazwisko;
			}
			set
			{
				if ((this._nazwisko != value))
				{
					this.OnnazwiskoChanging(value);
					this.SendPropertyChanging();
					this._nazwisko = value;
					this.SendPropertyChanged("nazwisko");
					this.OnnazwiskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int NOT NULL")]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_Laboratory_exam", Storage="_Laboratory_exams", ThisKey="id_lab", OtherKey="id_lab")]
		public EntitySet<Laboratory_exam> Laboratory_exams
		{
			get
			{
				return this._Laboratory_exams;
			}
			set
			{
				this._Laboratory_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory", Storage="_User", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Laboratories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Laboratories.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory = this;
		}
		
		private void detach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory_exam")]
	public partial class Laboratory_exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_bad_lab;
		
		private int _id_lab;
		
		private int _id_klab;
		
		private string _kod;
		
		private System.DateTime _data_zlec;
		
		private System.Nullable<System.DateTime> _data_wyk_anul;
		
		private System.Nullable<System.DateTime> _data_zatw_anul;
		
		private string _uwagi_lek;
		
		private string _wynik;
		
		private string _uwagi_kier;
		
		private int _status;
		
		private int _id_wiz;
		
		private EntityRef<Laboratory> _Laboratory;
		
		private EntityRef<Exam_dictionary> _Exam_dictionary;
		
		private EntityRef<Supervisor_lab> _Supervisor_lab;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_bad_labChanging(int value);
    partial void Onid_bad_labChanged();
    partial void Onid_labChanging(int value);
    partial void Onid_labChanged();
    partial void Onid_klabChanging(int value);
    partial void Onid_klabChanged();
    partial void OnkodChanging(string value);
    partial void OnkodChanged();
    partial void Ondata_zlecChanging(System.DateTime value);
    partial void Ondata_zlecChanged();
    partial void Ondata_wyk_anulChanging(System.Nullable<System.DateTime> value);
    partial void Ondata_wyk_anulChanged();
    partial void Ondata_zatw_anulChanging(System.Nullable<System.DateTime> value);
    partial void Ondata_zatw_anulChanged();
    partial void Onuwagi_lekChanging(string value);
    partial void Onuwagi_lekChanged();
    partial void OnwynikChanging(string value);
    partial void OnwynikChanged();
    partial void Onuwagi_kierChanging(string value);
    partial void Onuwagi_kierChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void Onid_wizChanging(int value);
    partial void Onid_wizChanged();
    #endregion
		
		public Laboratory_exam()
		{
			this._Laboratory = default(EntityRef<Laboratory>);
			this._Exam_dictionary = default(EntityRef<Exam_dictionary>);
			this._Supervisor_lab = default(EntityRef<Supervisor_lab>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_bad_lab", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_bad_lab
		{
			get
			{
				return this._id_bad_lab;
			}
			set
			{
				if ((this._id_bad_lab != value))
				{
					this.Onid_bad_labChanging(value);
					this.SendPropertyChanging();
					this._id_bad_lab = value;
					this.SendPropertyChanged("id_bad_lab");
					this.Onid_bad_labChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_lab", DbType="Int NOT NULL")]
		public int id_lab
		{
			get
			{
				return this._id_lab;
			}
			set
			{
				if ((this._id_lab != value))
				{
					if (this._Laboratory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_labChanging(value);
					this.SendPropertyChanging();
					this._id_lab = value;
					this.SendPropertyChanged("id_lab");
					this.Onid_labChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_klab", DbType="Int NOT NULL")]
		public int id_klab
		{
			get
			{
				return this._id_klab;
			}
			set
			{
				if ((this._id_klab != value))
				{
					if (this._Supervisor_lab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_klabChanging(value);
					this.SendPropertyChanging();
					this._id_klab = value;
					this.SendPropertyChanged("id_klab");
					this.Onid_klabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kod", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string kod
		{
			get
			{
				return this._kod;
			}
			set
			{
				if ((this._kod != value))
				{
					if (this._Exam_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkodChanging(value);
					this.SendPropertyChanging();
					this._kod = value;
					this.SendPropertyChanged("kod");
					this.OnkodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_zlec", DbType="Date NOT NULL")]
		public System.DateTime data_zlec
		{
			get
			{
				return this._data_zlec;
			}
			set
			{
				if ((this._data_zlec != value))
				{
					this.Ondata_zlecChanging(value);
					this.SendPropertyChanging();
					this._data_zlec = value;
					this.SendPropertyChanged("data_zlec");
					this.Ondata_zlecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_wyk_anul", DbType="Date")]
		public System.Nullable<System.DateTime> data_wyk_anul
		{
			get
			{
				return this._data_wyk_anul;
			}
			set
			{
				if ((this._data_wyk_anul != value))
				{
					this.Ondata_wyk_anulChanging(value);
					this.SendPropertyChanging();
					this._data_wyk_anul = value;
					this.SendPropertyChanged("data_wyk_anul");
					this.Ondata_wyk_anulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_zatw_anul", DbType="Date")]
		public System.Nullable<System.DateTime> data_zatw_anul
		{
			get
			{
				return this._data_zatw_anul;
			}
			set
			{
				if ((this._data_zatw_anul != value))
				{
					this.Ondata_zatw_anulChanging(value);
					this.SendPropertyChanging();
					this._data_zatw_anul = value;
					this.SendPropertyChanged("data_zatw_anul");
					this.Ondata_zatw_anulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uwagi_lek", DbType="VarChar(214)")]
		public string uwagi_lek
		{
			get
			{
				return this._uwagi_lek;
			}
			set
			{
				if ((this._uwagi_lek != value))
				{
					this.Onuwagi_lekChanging(value);
					this.SendPropertyChanging();
					this._uwagi_lek = value;
					this.SendPropertyChanged("uwagi_lek");
					this.Onuwagi_lekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wynik", DbType="VarChar(214)")]
		public string wynik
		{
			get
			{
				return this._wynik;
			}
			set
			{
				if ((this._wynik != value))
				{
					this.OnwynikChanging(value);
					this.SendPropertyChanging();
					this._wynik = value;
					this.SendPropertyChanged("wynik");
					this.OnwynikChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uwagi_kier", DbType="VarChar(214)")]
		public string uwagi_kier
		{
			get
			{
				return this._uwagi_kier;
			}
			set
			{
				if ((this._uwagi_kier != value))
				{
					this.Onuwagi_kierChanging(value);
					this.SendPropertyChanging();
					this._uwagi_kier = value;
					this.SendPropertyChanged("uwagi_kier");
					this.Onuwagi_kierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_wiz", DbType="Int NOT NULL")]
		public int id_wiz
		{
			get
			{
				return this._id_wiz;
			}
			set
			{
				if ((this._id_wiz != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_wizChanging(value);
					this.SendPropertyChanging();
					this._id_wiz = value;
					this.SendPropertyChanged("id_wiz");
					this.Onid_wizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_Laboratory_exam", Storage="_Laboratory", ThisKey="id_lab", OtherKey="id_lab", IsForeignKey=true)]
		public Laboratory Laboratory
		{
			get
			{
				return this._Laboratory.Entity;
			}
			set
			{
				Laboratory previousValue = this._Laboratory.Entity;
				if (((previousValue != value) 
							|| (this._Laboratory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laboratory.Entity = null;
						previousValue.Laboratory_exams.Remove(this);
					}
					this._Laboratory.Entity = value;
					if ((value != null))
					{
						value.Laboratory_exams.Add(this);
						this._id_lab = value.id_lab;
					}
					else
					{
						this._id_lab = default(int);
					}
					this.SendPropertyChanged("Laboratory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_dictionary_Laboratory_exam", Storage="_Exam_dictionary", ThisKey="kod", OtherKey="kod", IsForeignKey=true)]
		public Exam_dictionary Exam_dictionary
		{
			get
			{
				return this._Exam_dictionary.Entity;
			}
			set
			{
				Exam_dictionary previousValue = this._Exam_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Exam_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam_dictionary.Entity = null;
						previousValue.Laboratory_exams.Remove(this);
					}
					this._Exam_dictionary.Entity = value;
					if ((value != null))
					{
						value.Laboratory_exams.Add(this);
						this._kod = value.kod;
					}
					else
					{
						this._kod = default(string);
					}
					this.SendPropertyChanged("Exam_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supervisor_lab_Laboratory_exam", Storage="_Supervisor_lab", ThisKey="id_klab", OtherKey="id_klab", IsForeignKey=true)]
		public Supervisor_lab Supervisor_lab
		{
			get
			{
				return this._Supervisor_lab.Entity;
			}
			set
			{
				Supervisor_lab previousValue = this._Supervisor_lab.Entity;
				if (((previousValue != value) 
							|| (this._Supervisor_lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supervisor_lab.Entity = null;
						previousValue.Laboratory_exams.Remove(this);
					}
					this._Supervisor_lab.Entity = value;
					if ((value != null))
					{
						value.Laboratory_exams.Add(this);
						this._id_klab = value.id_klab;
					}
					else
					{
						this._id_klab = default(int);
					}
					this.SendPropertyChanged("Supervisor_lab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Laboratory_exam", Storage="_Visit", ThisKey="id_wiz", OtherKey="id_wiz", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.Laboratory_exams.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.Laboratory_exams.Add(this);
						this._id_wiz = value.id_wiz;
					}
					else
					{
						this._id_wiz = default(int);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_pac;
		
		private string _Imie;
		
		private string _nazwisko;
		
		private string _PESEL;
		
		private System.Nullable<int> _id_adresu;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_pacChanging(int value);
    partial void Onid_pacChanged();
    partial void OnImieChanging(string value);
    partial void OnImieChanged();
    partial void OnnazwiskoChanging(string value);
    partial void OnnazwiskoChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    partial void Onid_adresuChanging(System.Nullable<int> value);
    partial void Onid_adresuChanged();
    #endregion
		
		public Patient()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_pac", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_pac
		{
			get
			{
				return this._id_pac;
			}
			set
			{
				if ((this._id_pac != value))
				{
					this.Onid_pacChanging(value);
					this.SendPropertyChanging();
					this._id_pac = value;
					this.SendPropertyChanged("id_pac");
					this.Onid_pacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Imie", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Imie
		{
			get
			{
				return this._Imie;
			}
			set
			{
				if ((this._Imie != value))
				{
					this.OnImieChanging(value);
					this.SendPropertyChanging();
					this._Imie = value;
					this.SendPropertyChanged("Imie");
					this.OnImieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwisko", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nazwisko
		{
			get
			{
				return this._nazwisko;
			}
			set
			{
				if ((this._nazwisko != value))
				{
					this.OnnazwiskoChanging(value);
					this.SendPropertyChanging();
					this._nazwisko = value;
					this.SendPropertyChanged("nazwisko");
					this.OnnazwiskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_adresu", DbType="Int")]
		public System.Nullable<int> id_adresu
		{
			get
			{
				return this._id_adresu;
			}
			set
			{
				if ((this._id_adresu != value))
				{
					this.Onid_adresuChanging(value);
					this.SendPropertyChanging();
					this._id_adresu = value;
					this.SendPropertyChanged("id_adresu");
					this.Onid_adresuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Address", Storage="_Addresses", ThisKey="id_pac", OtherKey="id_pac")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="id_pac", OtherKey="id_pac")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Physical_exam")]
	public partial class Physical_exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_bad_fiz;
		
		private string _wynik;
		
		private System.Nullable<int> _id_wiz;
		
		private string _kod;
		
		private EntityRef<Exam_dictionary> _Exam_dictionary;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_bad_fizChanging(int value);
    partial void Onid_bad_fizChanged();
    partial void OnwynikChanging(string value);
    partial void OnwynikChanged();
    partial void Onid_wizChanging(System.Nullable<int> value);
    partial void Onid_wizChanged();
    partial void OnkodChanging(string value);
    partial void OnkodChanged();
    #endregion
		
		public Physical_exam()
		{
			this._Exam_dictionary = default(EntityRef<Exam_dictionary>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_bad_fiz", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_bad_fiz
		{
			get
			{
				return this._id_bad_fiz;
			}
			set
			{
				if ((this._id_bad_fiz != value))
				{
					this.Onid_bad_fizChanging(value);
					this.SendPropertyChanging();
					this._id_bad_fiz = value;
					this.SendPropertyChanged("id_bad_fiz");
					this.Onid_bad_fizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wynik", DbType="VarChar(214) NOT NULL", CanBeNull=false)]
		public string wynik
		{
			get
			{
				return this._wynik;
			}
			set
			{
				if ((this._wynik != value))
				{
					this.OnwynikChanging(value);
					this.SendPropertyChanging();
					this._wynik = value;
					this.SendPropertyChanged("wynik");
					this.OnwynikChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_wiz", DbType="Int")]
		public System.Nullable<int> id_wiz
		{
			get
			{
				return this._id_wiz;
			}
			set
			{
				if ((this._id_wiz != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_wizChanging(value);
					this.SendPropertyChanging();
					this._id_wiz = value;
					this.SendPropertyChanged("id_wiz");
					this.Onid_wizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kod", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string kod
		{
			get
			{
				return this._kod;
			}
			set
			{
				if ((this._kod != value))
				{
					if (this._Exam_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkodChanging(value);
					this.SendPropertyChanging();
					this._kod = value;
					this.SendPropertyChanged("kod");
					this.OnkodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_dictionary_Physical_exam", Storage="_Exam_dictionary", ThisKey="kod", OtherKey="kod", IsForeignKey=true)]
		public Exam_dictionary Exam_dictionary
		{
			get
			{
				return this._Exam_dictionary.Entity;
			}
			set
			{
				Exam_dictionary previousValue = this._Exam_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Exam_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam_dictionary.Entity = null;
						previousValue.Physical_exams.Remove(this);
					}
					this._Exam_dictionary.Entity = value;
					if ((value != null))
					{
						value.Physical_exams.Add(this);
						this._kod = value.kod;
					}
					else
					{
						this._kod = default(string);
					}
					this.SendPropertyChanged("Exam_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Physical_exam", Storage="_Visit", ThisKey="id_wiz", OtherKey="id_wiz", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.Physical_exams.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.Physical_exams.Add(this);
						this._id_wiz = value.id_wiz;
					}
					else
					{
						this._id_wiz = default(Nullable<int>);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Register")]
	public partial class Register : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_rec;
		
		private string _imie;
		
		private string _nazwisko;
		
		private int _Id_user;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_recChanging(int value);
    partial void Onid_recChanged();
    partial void OnimieChanging(string value);
    partial void OnimieChanged();
    partial void OnnazwiskoChanging(string value);
    partial void OnnazwiskoChanged();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    #endregion
		
		public Register()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_rec", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_rec
		{
			get
			{
				return this._id_rec;
			}
			set
			{
				if ((this._id_rec != value))
				{
					this.Onid_recChanging(value);
					this.SendPropertyChanging();
					this._id_rec = value;
					this.SendPropertyChanged("id_rec");
					this.Onid_recChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imie", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string imie
		{
			get
			{
				return this._imie;
			}
			set
			{
				if ((this._imie != value))
				{
					this.OnimieChanging(value);
					this.SendPropertyChanging();
					this._imie = value;
					this.SendPropertyChanged("imie");
					this.OnimieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwisko", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nazwisko
		{
			get
			{
				return this._nazwisko;
			}
			set
			{
				if ((this._nazwisko != value))
				{
					this.OnnazwiskoChanging(value);
					this.SendPropertyChanging();
					this._nazwisko = value;
					this.SendPropertyChanged("nazwisko");
					this.OnnazwiskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int NOT NULL")]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_Visit", Storage="_Visits", ThisKey="id_rec", OtherKey="id_rec")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register", Storage="_User", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Register = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Register = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supervisor_lab")]
	public partial class Supervisor_lab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_klab;
		
		private string _imie;
		
		private string _nazwsko;
		
		private int _Id_user;
		
		private EntitySet<Laboratory_exam> _Laboratory_exams;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_klabChanging(int value);
    partial void Onid_klabChanged();
    partial void OnimieChanging(string value);
    partial void OnimieChanged();
    partial void OnnazwskoChanging(string value);
    partial void OnnazwskoChanged();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    #endregion
		
		public Supervisor_lab()
		{
			this._Laboratory_exams = new EntitySet<Laboratory_exam>(new Action<Laboratory_exam>(this.attach_Laboratory_exams), new Action<Laboratory_exam>(this.detach_Laboratory_exams));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_klab", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_klab
		{
			get
			{
				return this._id_klab;
			}
			set
			{
				if ((this._id_klab != value))
				{
					this.Onid_klabChanging(value);
					this.SendPropertyChanging();
					this._id_klab = value;
					this.SendPropertyChanged("id_klab");
					this.Onid_klabChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imie", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string imie
		{
			get
			{
				return this._imie;
			}
			set
			{
				if ((this._imie != value))
				{
					this.OnimieChanging(value);
					this.SendPropertyChanging();
					this._imie = value;
					this.SendPropertyChanged("imie");
					this.OnimieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwsko", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string nazwsko
		{
			get
			{
				return this._nazwsko;
			}
			set
			{
				if ((this._nazwsko != value))
				{
					this.OnnazwskoChanging(value);
					this.SendPropertyChanging();
					this._nazwsko = value;
					this.SendPropertyChanged("nazwsko");
					this.OnnazwskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", DbType="Int NOT NULL")]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supervisor_lab_Laboratory_exam", Storage="_Laboratory_exams", ThisKey="id_klab", OtherKey="id_klab")]
		public EntitySet<Laboratory_exam> Laboratory_exams
		{
			get
			{
				return this._Laboratory_exams;
			}
			set
			{
				this._Laboratory_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Supervisor_lab", Storage="_User", ThisKey="Id_user", OtherKey="Id_user", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Supervisor_labs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Supervisor_labs.Add(this);
						this._Id_user = value.Id_user;
					}
					else
					{
						this._Id_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Supervisor_lab = this;
		}
		
		private void detach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Supervisor_lab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_user;
		
		private string _haslo;
		
		private string _Rola;
		
		private string _login;
		
		private System.Nullable<System.DateTime> _dat_wyg;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Laboratory> _Laboratories;
		
		private EntitySet<Register> _Registers;
		
		private EntitySet<Supervisor_lab> _Supervisor_labs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_userChanging(int value);
    partial void OnId_userChanged();
    partial void OnhasloChanging(string value);
    partial void OnhasloChanged();
    partial void OnRolaChanging(string value);
    partial void OnRolaChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void Ondat_wygChanging(System.Nullable<System.DateTime> value);
    partial void Ondat_wygChanged();
    #endregion
		
		public User()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Laboratories = new EntitySet<Laboratory>(new Action<Laboratory>(this.attach_Laboratories), new Action<Laboratory>(this.detach_Laboratories));
			this._Registers = new EntitySet<Register>(new Action<Register>(this.attach_Registers), new Action<Register>(this.detach_Registers));
			this._Supervisor_labs = new EntitySet<Supervisor_lab>(new Action<Supervisor_lab>(this.attach_Supervisor_labs), new Action<Supervisor_lab>(this.detach_Supervisor_labs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_user", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_user
		{
			get
			{
				return this._Id_user;
			}
			set
			{
				if ((this._Id_user != value))
				{
					this.OnId_userChanging(value);
					this.SendPropertyChanging();
					this._Id_user = value;
					this.SendPropertyChanged("Id_user");
					this.OnId_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_haslo", DbType="Char(32)")]
		public string haslo
		{
			get
			{
				return this._haslo;
			}
			set
			{
				if ((this._haslo != value))
				{
					this.OnhasloChanging(value);
					this.SendPropertyChanging();
					this._haslo = value;
					this.SendPropertyChanged("haslo");
					this.OnhasloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rola", DbType="Char(4)")]
		public string Rola
		{
			get
			{
				return this._Rola;
			}
			set
			{
				if ((this._Rola != value))
				{
					this.OnRolaChanging(value);
					this.SendPropertyChanging();
					this._Rola = value;
					this.SendPropertyChanged("Rola");
					this.OnRolaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="Char(40)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dat_wyg", DbType="Date")]
		public System.Nullable<System.DateTime> dat_wyg
		{
			get
			{
				return this._dat_wyg;
			}
			set
			{
				if ((this._dat_wyg != value))
				{
					this.Ondat_wygChanging(value);
					this.SendPropertyChanging();
					this._dat_wyg = value;
					this.SendPropertyChanged("dat_wyg");
					this.Ondat_wygChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_Doctors", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory", Storage="_Laboratories", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Laboratory> Laboratories
		{
			get
			{
				return this._Laboratories;
			}
			set
			{
				this._Laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register", Storage="_Registers", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Register> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Supervisor_lab", Storage="_Supervisor_labs", ThisKey="Id_user", OtherKey="Id_user")]
		public EntitySet<Supervisor_lab> Supervisor_labs
		{
			get
			{
				return this._Supervisor_labs;
			}
			set
			{
				this._Supervisor_labs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Laboratories(Laboratory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Supervisor_labs(Supervisor_lab entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Supervisor_labs(Supervisor_lab entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_wiz;
		
		private int _id_rec;
		
		private int _id_lek;
		
		private int _id_pac;
		
		private string _opis;
		
		private string _diagnoza;
		
		private System.DateTime _data_rej;
		
		private System.Nullable<System.DateTime> _data_anul_zak;
		
		private string _status;
		
		private EntitySet<Laboratory_exam> _Laboratory_exams;
		
		private EntitySet<Physical_exam> _Physical_exams;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Register> _Register;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_wizChanging(int value);
    partial void Onid_wizChanged();
    partial void Onid_recChanging(int value);
    partial void Onid_recChanged();
    partial void Onid_lekChanging(int value);
    partial void Onid_lekChanged();
    partial void Onid_pacChanging(int value);
    partial void Onid_pacChanged();
    partial void OnopisChanging(string value);
    partial void OnopisChanged();
    partial void OndiagnozaChanging(string value);
    partial void OndiagnozaChanged();
    partial void Ondata_rejChanging(System.DateTime value);
    partial void Ondata_rejChanged();
    partial void Ondata_anul_zakChanging(System.Nullable<System.DateTime> value);
    partial void Ondata_anul_zakChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Visit()
		{
			this._Laboratory_exams = new EntitySet<Laboratory_exam>(new Action<Laboratory_exam>(this.attach_Laboratory_exams), new Action<Laboratory_exam>(this.detach_Laboratory_exams));
			this._Physical_exams = new EntitySet<Physical_exam>(new Action<Physical_exam>(this.attach_Physical_exams), new Action<Physical_exam>(this.detach_Physical_exams));
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			this._Register = default(EntityRef<Register>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_wiz", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_wiz
		{
			get
			{
				return this._id_wiz;
			}
			set
			{
				if ((this._id_wiz != value))
				{
					this.Onid_wizChanging(value);
					this.SendPropertyChanging();
					this._id_wiz = value;
					this.SendPropertyChanged("id_wiz");
					this.Onid_wizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_rec", DbType="Int NOT NULL")]
		public int id_rec
		{
			get
			{
				return this._id_rec;
			}
			set
			{
				if ((this._id_rec != value))
				{
					if (this._Register.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_recChanging(value);
					this.SendPropertyChanging();
					this._id_rec = value;
					this.SendPropertyChanged("id_rec");
					this.Onid_recChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_lek", DbType="Int NOT NULL")]
		public int id_lek
		{
			get
			{
				return this._id_lek;
			}
			set
			{
				if ((this._id_lek != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_lekChanging(value);
					this.SendPropertyChanging();
					this._id_lek = value;
					this.SendPropertyChanged("id_lek");
					this.Onid_lekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_pac", DbType="Int NOT NULL")]
		public int id_pac
		{
			get
			{
				return this._id_pac;
			}
			set
			{
				if ((this._id_pac != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_pacChanging(value);
					this.SendPropertyChanging();
					this._id_pac = value;
					this.SendPropertyChanged("id_pac");
					this.Onid_pacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_opis", DbType="VarChar(214)")]
		public string opis
		{
			get
			{
				return this._opis;
			}
			set
			{
				if ((this._opis != value))
				{
					this.OnopisChanging(value);
					this.SendPropertyChanging();
					this._opis = value;
					this.SendPropertyChanged("opis");
					this.OnopisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnoza", DbType="VarChar(214)")]
		public string diagnoza
		{
			get
			{
				return this._diagnoza;
			}
			set
			{
				if ((this._diagnoza != value))
				{
					this.OndiagnozaChanging(value);
					this.SendPropertyChanging();
					this._diagnoza = value;
					this.SendPropertyChanged("diagnoza");
					this.OndiagnozaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_rej", DbType="Date NOT NULL")]
		public System.DateTime data_rej
		{
			get
			{
				return this._data_rej;
			}
			set
			{
				if ((this._data_rej != value))
				{
					this.Ondata_rejChanging(value);
					this.SendPropertyChanging();
					this._data_rej = value;
					this.SendPropertyChanged("data_rej");
					this.Ondata_rejChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_anul_zak", DbType="Date")]
		public System.Nullable<System.DateTime> data_anul_zak
		{
			get
			{
				return this._data_anul_zak;
			}
			set
			{
				if ((this._data_anul_zak != value))
				{
					this.Ondata_anul_zakChanging(value);
					this.SendPropertyChanging();
					this._data_anul_zak = value;
					this.SendPropertyChanged("data_anul_zak");
					this.Ondata_anul_zakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Laboratory_exam", Storage="_Laboratory_exams", ThisKey="id_wiz", OtherKey="id_wiz")]
		public EntitySet<Laboratory_exam> Laboratory_exams
		{
			get
			{
				return this._Laboratory_exams;
			}
			set
			{
				this._Laboratory_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Physical_exam", Storage="_Physical_exams", ThisKey="id_wiz", OtherKey="id_wiz")]
		public EntitySet<Physical_exam> Physical_exams
		{
			get
			{
				return this._Physical_exams;
			}
			set
			{
				this._Physical_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Doctor", ThisKey="id_lek", OtherKey="id_lek", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_lek = value.id_lek;
					}
					else
					{
						this._id_lek = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="id_pac", OtherKey="id_pac", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_pac = value.id_pac;
					}
					else
					{
						this._id_pac = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_Visit", Storage="_Register", ThisKey="id_rec", OtherKey="id_rec", IsForeignKey=true)]
		public Register Register
		{
			get
			{
				return this._Register.Entity;
			}
			set
			{
				Register previousValue = this._Register.Entity;
				if (((previousValue != value) 
							|| (this._Register.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Register.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Register.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_rec = value.id_rec;
					}
					else
					{
						this._id_rec = default(int);
					}
					this.SendPropertyChanged("Register");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Laboratory_exams(Laboratory_exam entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
		
		private void attach_Physical_exams(Physical_exam entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Physical_exams(Physical_exam entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
	}
}
#pragma warning restore 1591
